// Generated by Dagger (https://google.github.io/dagger).
package com.thanksmister.things.wallpanel.ui.activities;

import android.arch.lifecycle.ViewModelProvider;
import android.support.v4.app.Fragment;
import com.thanksmister.things.wallpanel.persistence.Configuration;
import dagger.MembersInjector;
import dagger.android.DispatchingAndroidInjector;
import dagger.android.support.DaggerAppCompatActivity_MembersInjector;
import javax.inject.Provider;

public final class LiveCameraActivity_MembersInjector
    implements MembersInjector<LiveCameraActivity> {
  private final Provider<DispatchingAndroidInjector<Fragment>> supportFragmentInjectorProvider;

  private final Provider<DispatchingAndroidInjector<android.app.Fragment>>
      frameworkFragmentInjectorProvider;

  private final Provider<ViewModelProvider.Factory> viewModelFactoryProvider;

  private final Provider<Configuration> configurationProvider;

  public LiveCameraActivity_MembersInjector(
      Provider<DispatchingAndroidInjector<Fragment>> supportFragmentInjectorProvider,
      Provider<DispatchingAndroidInjector<android.app.Fragment>> frameworkFragmentInjectorProvider,
      Provider<ViewModelProvider.Factory> viewModelFactoryProvider,
      Provider<Configuration> configurationProvider) {
    this.supportFragmentInjectorProvider = supportFragmentInjectorProvider;
    this.frameworkFragmentInjectorProvider = frameworkFragmentInjectorProvider;
    this.viewModelFactoryProvider = viewModelFactoryProvider;
    this.configurationProvider = configurationProvider;
  }

  public static MembersInjector<LiveCameraActivity> create(
      Provider<DispatchingAndroidInjector<Fragment>> supportFragmentInjectorProvider,
      Provider<DispatchingAndroidInjector<android.app.Fragment>> frameworkFragmentInjectorProvider,
      Provider<ViewModelProvider.Factory> viewModelFactoryProvider,
      Provider<Configuration> configurationProvider) {
    return new LiveCameraActivity_MembersInjector(
        supportFragmentInjectorProvider,
        frameworkFragmentInjectorProvider,
        viewModelFactoryProvider,
        configurationProvider);
  }

  @Override
  public void injectMembers(LiveCameraActivity instance) {
    DaggerAppCompatActivity_MembersInjector.injectSupportFragmentInjector(
        instance, supportFragmentInjectorProvider.get());
    DaggerAppCompatActivity_MembersInjector.injectFrameworkFragmentInjector(
        instance, frameworkFragmentInjectorProvider.get());
    injectViewModelFactory(instance, viewModelFactoryProvider.get());
    injectConfiguration(instance, configurationProvider.get());
  }

  public static void injectViewModelFactory(
      LiveCameraActivity instance, ViewModelProvider.Factory viewModelFactory) {
    instance.viewModelFactory = viewModelFactory;
  }

  public static void injectConfiguration(LiveCameraActivity instance, Configuration configuration) {
    instance.configuration = configuration;
  }
}
