// Generated by Dagger (https://google.github.io/dagger).
package com.thanksmister.things.wallpanel.network;

import com.thanksmister.things.wallpanel.modules.CameraReader;
import com.thanksmister.things.wallpanel.modules.SensorReader;
import com.thanksmister.things.wallpanel.persistence.Configuration;
import dagger.MembersInjector;
import javax.inject.Provider;

public final class WallPanelService_MembersInjector implements MembersInjector<WallPanelService> {
  private final Provider<Configuration> configurationProvider;

  private final Provider<CameraReader> cameraReaderProvider;

  private final Provider<SensorReader> sensorReaderProvider;

  private final Provider<MQTTOptions> mqttOptionsProvider;

  public WallPanelService_MembersInjector(
      Provider<Configuration> configurationProvider,
      Provider<CameraReader> cameraReaderProvider,
      Provider<SensorReader> sensorReaderProvider,
      Provider<MQTTOptions> mqttOptionsProvider) {
    this.configurationProvider = configurationProvider;
    this.cameraReaderProvider = cameraReaderProvider;
    this.sensorReaderProvider = sensorReaderProvider;
    this.mqttOptionsProvider = mqttOptionsProvider;
  }

  public static MembersInjector<WallPanelService> create(
      Provider<Configuration> configurationProvider,
      Provider<CameraReader> cameraReaderProvider,
      Provider<SensorReader> sensorReaderProvider,
      Provider<MQTTOptions> mqttOptionsProvider) {
    return new WallPanelService_MembersInjector(
        configurationProvider, cameraReaderProvider, sensorReaderProvider, mqttOptionsProvider);
  }

  @Override
  public void injectMembers(WallPanelService instance) {
    injectConfiguration(instance, configurationProvider.get());
    injectCameraReader(instance, cameraReaderProvider.get());
    injectSensorReader(instance, sensorReaderProvider.get());
    injectMqttOptions(instance, mqttOptionsProvider.get());
  }

  public static void injectConfiguration(WallPanelService instance, Configuration configuration) {
    instance.configuration = configuration;
  }

  public static void injectCameraReader(WallPanelService instance, CameraReader cameraReader) {
    instance.cameraReader = cameraReader;
  }

  public static void injectSensorReader(WallPanelService instance, SensorReader sensorReader) {
    instance.sensorReader = sensorReader;
  }

  public static void injectMqttOptions(WallPanelService instance, MQTTOptions mqttOptions) {
    instance.mqttOptions = mqttOptions;
  }
}
