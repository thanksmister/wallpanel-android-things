// Generated by Dagger (https://google.github.io/dagger).
package com.thanksmister.things.wallpanel.di;

import android.app.Activity;
import android.app.Fragment;
import android.app.Service;
import android.arch.lifecycle.ViewModel;
import android.content.BroadcastReceiver;
import android.content.ContentProvider;
import android.content.SharedPreferences;
import com.google.common.collect.ImmutableMap;
import com.thanksmister.things.wallpanel.WallPanel;
import com.thanksmister.things.wallpanel.modules.CameraReader;
import com.thanksmister.things.wallpanel.modules.SensorReader;
import com.thanksmister.things.wallpanel.network.MQTTOptions;
import com.thanksmister.things.wallpanel.network.WallPanelService;
import com.thanksmister.things.wallpanel.network.WallPanelService_MembersInjector;
import com.thanksmister.things.wallpanel.persistence.Configuration;
import com.thanksmister.things.wallpanel.ui.DetectionViewModel;
import com.thanksmister.things.wallpanel.ui.DetectionViewModel_Factory;
import com.thanksmister.things.wallpanel.ui.activities.AboutActivity;
import com.thanksmister.things.wallpanel.ui.activities.AboutActivity_MembersInjector;
import com.thanksmister.things.wallpanel.ui.activities.BrowserActivity;
import com.thanksmister.things.wallpanel.ui.activities.BrowserActivityNative;
import com.thanksmister.things.wallpanel.ui.activities.BrowserActivity_MembersInjector;
import com.thanksmister.things.wallpanel.ui.activities.LiveCameraActivity;
import com.thanksmister.things.wallpanel.ui.activities.LiveCameraActivity_MembersInjector;
import com.thanksmister.things.wallpanel.ui.activities.SettingsActivity;
import com.thanksmister.things.wallpanel.ui.activities.SettingsActivity_MembersInjector;
import com.thanksmister.things.wallpanel.ui.activities.WelcomeActivity;
import com.thanksmister.things.wallpanel.ui.activities.WelcomeActivity_MembersInjector;
import com.thanksmister.things.wallpanel.ui.fragments.BaseSettingsFragment;
import com.thanksmister.things.wallpanel.ui.fragments.BaseSettingsFragment_MembersInjector;
import com.thanksmister.things.wallpanel.ui.fragments.CameraSettingsFragment;
import com.thanksmister.things.wallpanel.ui.fragments.DeviceSettingsFragment;
import com.thanksmister.things.wallpanel.ui.fragments.DeviceSettingsFragment_MembersInjector;
import com.thanksmister.things.wallpanel.ui.fragments.HttpSettingsFragment;
import com.thanksmister.things.wallpanel.ui.fragments.MqttSettingsFragment;
import com.thanksmister.things.wallpanel.ui.fragments.SensorsSettingsFragment;
import com.thanksmister.things.wallpanel.ui.fragments.SettingsFragment;
import com.thanksmister.things.wallpanel.utils.DialogUtils;
import dagger.android.AndroidInjector;
import dagger.android.DaggerApplication_MembersInjector;
import dagger.android.DispatchingAndroidInjector;
import dagger.android.DispatchingAndroidInjector_Factory;
import dagger.android.support.DaggerAppCompatActivity_MembersInjector;
import dagger.internal.DoubleCheck;
import dagger.internal.InstanceFactory;
import dagger.internal.MapProviderFactory;
import dagger.internal.Preconditions;
import java.util.Map;
import javax.inject.Provider;

public final class DaggerApplicationComponent implements ApplicationComponent {
  private WallPanel seedInstance;

  private Provider<
          AndroidBindingModule_WelcomeActivity$app_devDebug.WelcomeActivitySubcomponent.Builder>
      welcomeActivitySubcomponentBuilderProvider;

  private Provider<
          AndroidBindingModule_SettingsActivity$app_devDebug.SettingsActivitySubcomponent.Builder>
      settingsActivitySubcomponentBuilderProvider;

  private Provider<
          AndroidBindingModule_BrowserActivity$app_devDebug.BrowserActivitySubcomponent.Builder>
      browserActivitySubcomponentBuilderProvider;

  private Provider<
          AndroidBindingModule_AboutActivity$app_devDebug.AboutActivitySubcomponent.Builder>
      aboutActivitySubcomponentBuilderProvider;

  private Provider<
          AndroidBindingModule_BrowserActivityNative$app_devDebug.BrowserActivityNativeSubcomponent
              .Builder>
      browserActivityNativeSubcomponentBuilderProvider;

  private Provider<
          AndroidBindingModule_LiveCameraActivity$app_devDebug.LiveCameraActivitySubcomponent
              .Builder>
      liveCameraActivitySubcomponentBuilderProvider;

  private Provider<ServiceSubcomponent.Builder> serviceSubcomponentBuilderProvider;

  private Provider<
          AndroidBindingModule_BaseSettingsFragment$app_devDebug.BaseSettingsFragmentSubcomponent
              .Builder>
      baseSettingsFragmentSubcomponentBuilderProvider;

  private Provider<
          AndroidBindingModule_SettingsFragment$app_devDebug.SettingsFragmentSubcomponent.Builder>
      settingsFragmentSubcomponentBuilderProvider;

  private Provider<
          AndroidBindingModule_CameraSettings$app_devDebug.CameraSettingsFragmentSubcomponent
              .Builder>
      cameraSettingsFragmentSubcomponentBuilderProvider;

  private Provider<
          AndroidBindingModule_MqttSettings$app_devDebug.MqttSettingsFragmentSubcomponent.Builder>
      mqttSettingsFragmentSubcomponentBuilderProvider;

  private Provider<
          AndroidBindingModule_HttpSettings$app_devDebug.HttpSettingsFragmentSubcomponent.Builder>
      httpSettingsFragmentSubcomponentBuilderProvider;

  private Provider<
          AndroidBindingModule_DeviceSettings$app_devDebug.DeviceSettingsFragmentSubcomponent
              .Builder>
      deviceSettingsFragmentSubcomponentBuilderProvider;

  private Provider<
          AndroidBindingModule_SensorsSettings$app_devDebug.SensorsSettingsFragmentSubcomponent
              .Builder>
      sensorsSettingsFragmentSubcomponentBuilderProvider;

  private Provider<WallPanel> seedInstanceProvider;

  private Provider<SharedPreferences> provideSharedPreferencesProvider;

  private ActivityModule_ProvideConfigurationFactory provideConfigurationProvider;

  private ActivityModule_ProvideCameraReaderFactory provideCameraReaderProvider;

  private DetectionViewModel_Factory detectionViewModelProvider;

  private Provider<Map<Class<? extends ViewModel>, Provider<ViewModel>>>
      mapOfClassOfAndProviderOfViewModelProvider;

  private Provider<DaggerViewModelFactory> daggerViewModelFactoryProvider;

  private DaggerApplicationComponent(Builder builder) {
    initialize(builder);
  }

  public static ApplicationComponent.Builder builder() {
    return new Builder();
  }

  private Map<Class<? extends Activity>, Provider<AndroidInjector.Factory<? extends Activity>>>
      getMapOfClassOfAndProviderOfFactoryOf() {
    return ImmutableMap
        .<Class<? extends Activity>, Provider<AndroidInjector.Factory<? extends Activity>>>builder()
        .put(WelcomeActivity.class, (Provider) welcomeActivitySubcomponentBuilderProvider)
        .put(SettingsActivity.class, (Provider) settingsActivitySubcomponentBuilderProvider)
        .put(BrowserActivity.class, (Provider) browserActivitySubcomponentBuilderProvider)
        .put(AboutActivity.class, (Provider) aboutActivitySubcomponentBuilderProvider)
        .put(
            BrowserActivityNative.class,
            (Provider) browserActivityNativeSubcomponentBuilderProvider)
        .put(LiveCameraActivity.class, (Provider) liveCameraActivitySubcomponentBuilderProvider)
        .build();
  }

  private DispatchingAndroidInjector<Activity> getDispatchingAndroidInjectorOfActivity() {
    return DispatchingAndroidInjector_Factory.newDispatchingAndroidInjector(
        getMapOfClassOfAndProviderOfFactoryOf());
  }

  private DispatchingAndroidInjector<BroadcastReceiver>
      getDispatchingAndroidInjectorOfBroadcastReceiver() {
    return DispatchingAndroidInjector_Factory.newDispatchingAndroidInjector(
        ImmutableMap
            .<Class<? extends BroadcastReceiver>,
                Provider<AndroidInjector.Factory<? extends BroadcastReceiver>>>
                of());
  }

  private DispatchingAndroidInjector<Fragment> getDispatchingAndroidInjectorOfFragment() {
    return DispatchingAndroidInjector_Factory.newDispatchingAndroidInjector(
        ImmutableMap
            .<Class<? extends Fragment>, Provider<AndroidInjector.Factory<? extends Fragment>>>
                of());
  }

  private Map<Class<? extends Service>, Provider<AndroidInjector.Factory<? extends Service>>>
      getMapOfClassOfAndProviderOfFactoryOf2() {
    return ImmutableMap
        .<Class<? extends Service>, Provider<AndroidInjector.Factory<? extends Service>>>of(
            WallPanelService.class, (Provider) serviceSubcomponentBuilderProvider);
  }

  private DispatchingAndroidInjector<Service> getDispatchingAndroidInjectorOfService() {
    return DispatchingAndroidInjector_Factory.newDispatchingAndroidInjector(
        getMapOfClassOfAndProviderOfFactoryOf2());
  }

  private DispatchingAndroidInjector<ContentProvider>
      getDispatchingAndroidInjectorOfContentProvider() {
    return DispatchingAndroidInjector_Factory.newDispatchingAndroidInjector(
        ImmutableMap
            .<Class<? extends ContentProvider>,
                Provider<AndroidInjector.Factory<? extends ContentProvider>>>
                of());
  }

  private Map<
          Class<? extends android.support.v4.app.Fragment>,
          Provider<AndroidInjector.Factory<? extends android.support.v4.app.Fragment>>>
      getMapOfClassOfAndProviderOfFactoryOf3() {
    return ImmutableMap
        .<Class<? extends android.support.v4.app.Fragment>,
            Provider<AndroidInjector.Factory<? extends android.support.v4.app.Fragment>>>
            builder()
        .put(BaseSettingsFragment.class, (Provider) baseSettingsFragmentSubcomponentBuilderProvider)
        .put(SettingsFragment.class, (Provider) settingsFragmentSubcomponentBuilderProvider)
        .put(
            CameraSettingsFragment.class,
            (Provider) cameraSettingsFragmentSubcomponentBuilderProvider)
        .put(MqttSettingsFragment.class, (Provider) mqttSettingsFragmentSubcomponentBuilderProvider)
        .put(HttpSettingsFragment.class, (Provider) httpSettingsFragmentSubcomponentBuilderProvider)
        .put(
            DeviceSettingsFragment.class,
            (Provider) deviceSettingsFragmentSubcomponentBuilderProvider)
        .put(
            SensorsSettingsFragment.class,
            (Provider) sensorsSettingsFragmentSubcomponentBuilderProvider)
        .build();
  }

  private DispatchingAndroidInjector<android.support.v4.app.Fragment>
      getDispatchingAndroidInjectorOfFragment2() {
    return DispatchingAndroidInjector_Factory.newDispatchingAndroidInjector(
        getMapOfClassOfAndProviderOfFactoryOf3());
  }

  private Configuration getConfiguration() {
    return ActivityModule_ProvideConfigurationFactory.proxyProvideConfiguration(
        seedInstance, provideSharedPreferencesProvider.get());
  }

  private DialogUtils getDialogUtils() {
    return ActivityModule_ProvidesDialogUtilsFactory.proxyProvidesDialogUtils(seedInstance);
  }

  private CameraReader getCameraReader() {
    return ActivityModule_ProvideCameraReaderFactory.proxyProvideCameraReader(seedInstance);
  }

  private SensorReader getSensorReader() {
    return ActivityModule_ProvideSensorReaderFactory.proxyProvideSensorReader(seedInstance);
  }

  private MQTTOptions getMQTTOptions() {
    return ActivityModule_ProvideMQTTOptionsFactory.proxyProvideMQTTOptions(getConfiguration());
  }

  @SuppressWarnings("unchecked")
  private void initialize(final Builder builder) {
    this.welcomeActivitySubcomponentBuilderProvider =
        new Provider<
            AndroidBindingModule_WelcomeActivity$app_devDebug.WelcomeActivitySubcomponent
                .Builder>() {
          @Override
          public AndroidBindingModule_WelcomeActivity$app_devDebug.WelcomeActivitySubcomponent
                  .Builder
              get() {
            return new WelcomeActivitySubcomponentBuilder();
          }
        };
    this.settingsActivitySubcomponentBuilderProvider =
        new Provider<
            AndroidBindingModule_SettingsActivity$app_devDebug.SettingsActivitySubcomponent
                .Builder>() {
          @Override
          public AndroidBindingModule_SettingsActivity$app_devDebug.SettingsActivitySubcomponent
                  .Builder
              get() {
            return new SettingsActivitySubcomponentBuilder();
          }
        };
    this.browserActivitySubcomponentBuilderProvider =
        new Provider<
            AndroidBindingModule_BrowserActivity$app_devDebug.BrowserActivitySubcomponent
                .Builder>() {
          @Override
          public AndroidBindingModule_BrowserActivity$app_devDebug.BrowserActivitySubcomponent
                  .Builder
              get() {
            return new BrowserActivitySubcomponentBuilder();
          }
        };
    this.aboutActivitySubcomponentBuilderProvider =
        new Provider<
            AndroidBindingModule_AboutActivity$app_devDebug.AboutActivitySubcomponent.Builder>() {
          @Override
          public AndroidBindingModule_AboutActivity$app_devDebug.AboutActivitySubcomponent.Builder
              get() {
            return new AboutActivitySubcomponentBuilder();
          }
        };
    this.browserActivityNativeSubcomponentBuilderProvider =
        new Provider<
            AndroidBindingModule_BrowserActivityNative$app_devDebug
                .BrowserActivityNativeSubcomponent.Builder>() {
          @Override
          public AndroidBindingModule_BrowserActivityNative$app_devDebug
                  .BrowserActivityNativeSubcomponent.Builder
              get() {
            return new BrowserActivityNativeSubcomponentBuilder();
          }
        };
    this.liveCameraActivitySubcomponentBuilderProvider =
        new Provider<
            AndroidBindingModule_LiveCameraActivity$app_devDebug.LiveCameraActivitySubcomponent
                .Builder>() {
          @Override
          public AndroidBindingModule_LiveCameraActivity$app_devDebug.LiveCameraActivitySubcomponent
                  .Builder
              get() {
            return new LiveCameraActivitySubcomponentBuilder();
          }
        };
    this.serviceSubcomponentBuilderProvider =
        new Provider<ServiceSubcomponent.Builder>() {
          @Override
          public ServiceSubcomponent.Builder get() {
            return new ServiceSubcomponentBuilder();
          }
        };
    this.baseSettingsFragmentSubcomponentBuilderProvider =
        new Provider<
            AndroidBindingModule_BaseSettingsFragment$app_devDebug.BaseSettingsFragmentSubcomponent
                .Builder>() {
          @Override
          public AndroidBindingModule_BaseSettingsFragment$app_devDebug
                  .BaseSettingsFragmentSubcomponent.Builder
              get() {
            return new BaseSettingsFragmentSubcomponentBuilder();
          }
        };
    this.settingsFragmentSubcomponentBuilderProvider =
        new Provider<
            AndroidBindingModule_SettingsFragment$app_devDebug.SettingsFragmentSubcomponent
                .Builder>() {
          @Override
          public AndroidBindingModule_SettingsFragment$app_devDebug.SettingsFragmentSubcomponent
                  .Builder
              get() {
            return new SettingsFragmentSubcomponentBuilder();
          }
        };
    this.cameraSettingsFragmentSubcomponentBuilderProvider =
        new Provider<
            AndroidBindingModule_CameraSettings$app_devDebug.CameraSettingsFragmentSubcomponent
                .Builder>() {
          @Override
          public AndroidBindingModule_CameraSettings$app_devDebug.CameraSettingsFragmentSubcomponent
                  .Builder
              get() {
            return new CameraSettingsFragmentSubcomponentBuilder();
          }
        };
    this.mqttSettingsFragmentSubcomponentBuilderProvider =
        new Provider<
            AndroidBindingModule_MqttSettings$app_devDebug.MqttSettingsFragmentSubcomponent
                .Builder>() {
          @Override
          public AndroidBindingModule_MqttSettings$app_devDebug.MqttSettingsFragmentSubcomponent
                  .Builder
              get() {
            return new MqttSettingsFragmentSubcomponentBuilder();
          }
        };
    this.httpSettingsFragmentSubcomponentBuilderProvider =
        new Provider<
            AndroidBindingModule_HttpSettings$app_devDebug.HttpSettingsFragmentSubcomponent
                .Builder>() {
          @Override
          public AndroidBindingModule_HttpSettings$app_devDebug.HttpSettingsFragmentSubcomponent
                  .Builder
              get() {
            return new HttpSettingsFragmentSubcomponentBuilder();
          }
        };
    this.deviceSettingsFragmentSubcomponentBuilderProvider =
        new Provider<
            AndroidBindingModule_DeviceSettings$app_devDebug.DeviceSettingsFragmentSubcomponent
                .Builder>() {
          @Override
          public AndroidBindingModule_DeviceSettings$app_devDebug.DeviceSettingsFragmentSubcomponent
                  .Builder
              get() {
            return new DeviceSettingsFragmentSubcomponentBuilder();
          }
        };
    this.sensorsSettingsFragmentSubcomponentBuilderProvider =
        new Provider<
            AndroidBindingModule_SensorsSettings$app_devDebug.SensorsSettingsFragmentSubcomponent
                .Builder>() {
          @Override
          public AndroidBindingModule_SensorsSettings$app_devDebug
                  .SensorsSettingsFragmentSubcomponent.Builder
              get() {
            return new SensorsSettingsFragmentSubcomponentBuilder();
          }
        };
    this.seedInstance = builder.seedInstance;
    this.seedInstanceProvider = InstanceFactory.create(builder.seedInstance);
    this.provideSharedPreferencesProvider =
        DoubleCheck.provider(
            ActivityModule_ProvideSharedPreferencesFactory.create(
                builder.activityModule, (Provider) seedInstanceProvider));
    this.provideConfigurationProvider =
        ActivityModule_ProvideConfigurationFactory.create(
            (Provider) seedInstanceProvider, provideSharedPreferencesProvider);
    this.provideCameraReaderProvider =
        ActivityModule_ProvideCameraReaderFactory.create((Provider) seedInstanceProvider);
    this.detectionViewModelProvider =
        DetectionViewModel_Factory.create(
            (Provider) seedInstanceProvider,
            provideConfigurationProvider,
            provideCameraReaderProvider);
    this.mapOfClassOfAndProviderOfViewModelProvider =
        MapProviderFactory.<Class<? extends ViewModel>, ViewModel>builder(1)
            .put(DetectionViewModel.class, (Provider) detectionViewModelProvider)
            .build();
    this.daggerViewModelFactoryProvider =
        DoubleCheck.provider(
            DaggerViewModelFactory_Factory.create(mapOfClassOfAndProviderOfViewModelProvider));
  }

  @Override
  public void inject(WallPanel arg0) {
    injectWallPanel(arg0);
  }

  private WallPanel injectWallPanel(WallPanel instance) {
    DaggerApplication_MembersInjector.injectActivityInjector(
        instance, getDispatchingAndroidInjectorOfActivity());
    DaggerApplication_MembersInjector.injectBroadcastReceiverInjector(
        instance, getDispatchingAndroidInjectorOfBroadcastReceiver());
    DaggerApplication_MembersInjector.injectFragmentInjector(
        instance, getDispatchingAndroidInjectorOfFragment());
    DaggerApplication_MembersInjector.injectServiceInjector(
        instance, getDispatchingAndroidInjectorOfService());
    DaggerApplication_MembersInjector.injectContentProviderInjector(
        instance, getDispatchingAndroidInjectorOfContentProvider());
    DaggerApplication_MembersInjector.injectSetInjected(instance);
    dagger.android.support.DaggerApplication_MembersInjector.injectSupportFragmentInjector(
        instance, getDispatchingAndroidInjectorOfFragment2());
    return instance;
  }

  private static final class Builder extends ApplicationComponent.Builder {
    private ActivityModule activityModule;

    private WallPanel seedInstance;

    @Override
    public ApplicationComponent build() {
      if (activityModule == null) {
        this.activityModule = new ActivityModule();
      }
      if (seedInstance == null) {
        throw new IllegalStateException(WallPanel.class.getCanonicalName() + " must be set");
      }
      return new DaggerApplicationComponent(this);
    }

    @Override
    public void seedInstance(WallPanel arg0) {
      this.seedInstance = Preconditions.checkNotNull(arg0);
    }
  }

  private final class WelcomeActivitySubcomponentBuilder
      extends AndroidBindingModule_WelcomeActivity$app_devDebug.WelcomeActivitySubcomponent
          .Builder {
    private WelcomeActivity seedInstance;

    @Override
    public AndroidBindingModule_WelcomeActivity$app_devDebug.WelcomeActivitySubcomponent build() {
      if (seedInstance == null) {
        throw new IllegalStateException(WelcomeActivity.class.getCanonicalName() + " must be set");
      }
      return new WelcomeActivitySubcomponentImpl(this);
    }

    @Override
    public void seedInstance(WelcomeActivity arg0) {
      this.seedInstance = Preconditions.checkNotNull(arg0);
    }
  }

  private final class WelcomeActivitySubcomponentImpl
      implements AndroidBindingModule_WelcomeActivity$app_devDebug.WelcomeActivitySubcomponent {
    private WelcomeActivitySubcomponentImpl(WelcomeActivitySubcomponentBuilder builder) {}

    @Override
    public void inject(WelcomeActivity arg0) {
      injectWelcomeActivity(arg0);
    }

    private WelcomeActivity injectWelcomeActivity(WelcomeActivity instance) {
      DaggerAppCompatActivity_MembersInjector.injectSupportFragmentInjector(
          instance, DaggerApplicationComponent.this.getDispatchingAndroidInjectorOfFragment2());
      DaggerAppCompatActivity_MembersInjector.injectFrameworkFragmentInjector(
          instance, DaggerApplicationComponent.this.getDispatchingAndroidInjectorOfFragment());
      WelcomeActivity_MembersInjector.injectConfiguration(
          instance, DaggerApplicationComponent.this.getConfiguration());
      return instance;
    }
  }

  private final class SettingsActivitySubcomponentBuilder
      extends AndroidBindingModule_SettingsActivity$app_devDebug.SettingsActivitySubcomponent
          .Builder {
    private SettingsActivity seedInstance;

    @Override
    public AndroidBindingModule_SettingsActivity$app_devDebug.SettingsActivitySubcomponent build() {
      if (seedInstance == null) {
        throw new IllegalStateException(SettingsActivity.class.getCanonicalName() + " must be set");
      }
      return new SettingsActivitySubcomponentImpl(this);
    }

    @Override
    public void seedInstance(SettingsActivity arg0) {
      this.seedInstance = Preconditions.checkNotNull(arg0);
    }
  }

  private final class SettingsActivitySubcomponentImpl
      implements AndroidBindingModule_SettingsActivity$app_devDebug.SettingsActivitySubcomponent {
    private SettingsActivitySubcomponentImpl(SettingsActivitySubcomponentBuilder builder) {}

    @Override
    public void inject(SettingsActivity arg0) {
      injectSettingsActivity(arg0);
    }

    private SettingsActivity injectSettingsActivity(SettingsActivity instance) {
      DaggerAppCompatActivity_MembersInjector.injectSupportFragmentInjector(
          instance, DaggerApplicationComponent.this.getDispatchingAndroidInjectorOfFragment2());
      DaggerAppCompatActivity_MembersInjector.injectFrameworkFragmentInjector(
          instance, DaggerApplicationComponent.this.getDispatchingAndroidInjectorOfFragment());
      SettingsActivity_MembersInjector.injectConfiguration(
          instance, DaggerApplicationComponent.this.getConfiguration());
      SettingsActivity_MembersInjector.injectDialogUtils(
          instance, DaggerApplicationComponent.this.getDialogUtils());
      return instance;
    }
  }

  private final class BrowserActivitySubcomponentBuilder
      extends AndroidBindingModule_BrowserActivity$app_devDebug.BrowserActivitySubcomponent
          .Builder {
    private BrowserActivity seedInstance;

    @Override
    public AndroidBindingModule_BrowserActivity$app_devDebug.BrowserActivitySubcomponent build() {
      if (seedInstance == null) {
        throw new IllegalStateException(BrowserActivity.class.getCanonicalName() + " must be set");
      }
      return new BrowserActivitySubcomponentImpl(this);
    }

    @Override
    public void seedInstance(BrowserActivity arg0) {
      this.seedInstance = Preconditions.checkNotNull(arg0);
    }
  }

  private final class BrowserActivitySubcomponentImpl
      implements AndroidBindingModule_BrowserActivity$app_devDebug.BrowserActivitySubcomponent {
    private BrowserActivitySubcomponentImpl(BrowserActivitySubcomponentBuilder builder) {}

    @Override
    public void inject(BrowserActivity arg0) {
      injectBrowserActivity(arg0);
    }

    private BrowserActivity injectBrowserActivity(BrowserActivity instance) {
      DaggerAppCompatActivity_MembersInjector.injectSupportFragmentInjector(
          instance, DaggerApplicationComponent.this.getDispatchingAndroidInjectorOfFragment2());
      DaggerAppCompatActivity_MembersInjector.injectFrameworkFragmentInjector(
          instance, DaggerApplicationComponent.this.getDispatchingAndroidInjectorOfFragment());
      BrowserActivity_MembersInjector.injectDialogUtils(
          instance, DaggerApplicationComponent.this.getDialogUtils());
      BrowserActivity_MembersInjector.injectConfiguration(
          instance, DaggerApplicationComponent.this.getConfiguration());
      return instance;
    }
  }

  private final class AboutActivitySubcomponentBuilder
      extends AndroidBindingModule_AboutActivity$app_devDebug.AboutActivitySubcomponent.Builder {
    private AboutActivity seedInstance;

    @Override
    public AndroidBindingModule_AboutActivity$app_devDebug.AboutActivitySubcomponent build() {
      if (seedInstance == null) {
        throw new IllegalStateException(AboutActivity.class.getCanonicalName() + " must be set");
      }
      return new AboutActivitySubcomponentImpl(this);
    }

    @Override
    public void seedInstance(AboutActivity arg0) {
      this.seedInstance = Preconditions.checkNotNull(arg0);
    }
  }

  private final class AboutActivitySubcomponentImpl
      implements AndroidBindingModule_AboutActivity$app_devDebug.AboutActivitySubcomponent {
    private AboutActivitySubcomponentImpl(AboutActivitySubcomponentBuilder builder) {}

    @Override
    public void inject(AboutActivity arg0) {
      injectAboutActivity(arg0);
    }

    private AboutActivity injectAboutActivity(AboutActivity instance) {
      DaggerAppCompatActivity_MembersInjector.injectSupportFragmentInjector(
          instance, DaggerApplicationComponent.this.getDispatchingAndroidInjectorOfFragment2());
      DaggerAppCompatActivity_MembersInjector.injectFrameworkFragmentInjector(
          instance, DaggerApplicationComponent.this.getDispatchingAndroidInjectorOfFragment());
      AboutActivity_MembersInjector.injectConfiguration(
          instance, DaggerApplicationComponent.this.getConfiguration());
      return instance;
    }
  }

  private final class BrowserActivityNativeSubcomponentBuilder
      extends AndroidBindingModule_BrowserActivityNative$app_devDebug
          .BrowserActivityNativeSubcomponent.Builder {
    private BrowserActivityNative seedInstance;

    @Override
    public AndroidBindingModule_BrowserActivityNative$app_devDebug.BrowserActivityNativeSubcomponent
        build() {
      if (seedInstance == null) {
        throw new IllegalStateException(
            BrowserActivityNative.class.getCanonicalName() + " must be set");
      }
      return new BrowserActivityNativeSubcomponentImpl(this);
    }

    @Override
    public void seedInstance(BrowserActivityNative arg0) {
      this.seedInstance = Preconditions.checkNotNull(arg0);
    }
  }

  private final class BrowserActivityNativeSubcomponentImpl
      implements AndroidBindingModule_BrowserActivityNative$app_devDebug
          .BrowserActivityNativeSubcomponent {
    private BrowserActivityNativeSubcomponentImpl(
        BrowserActivityNativeSubcomponentBuilder builder) {}

    @Override
    public void inject(BrowserActivityNative arg0) {
      injectBrowserActivityNative(arg0);
    }

    private BrowserActivityNative injectBrowserActivityNative(BrowserActivityNative instance) {
      DaggerAppCompatActivity_MembersInjector.injectSupportFragmentInjector(
          instance, DaggerApplicationComponent.this.getDispatchingAndroidInjectorOfFragment2());
      DaggerAppCompatActivity_MembersInjector.injectFrameworkFragmentInjector(
          instance, DaggerApplicationComponent.this.getDispatchingAndroidInjectorOfFragment());
      BrowserActivity_MembersInjector.injectDialogUtils(
          instance, DaggerApplicationComponent.this.getDialogUtils());
      BrowserActivity_MembersInjector.injectConfiguration(
          instance, DaggerApplicationComponent.this.getConfiguration());
      return instance;
    }
  }

  private final class LiveCameraActivitySubcomponentBuilder
      extends AndroidBindingModule_LiveCameraActivity$app_devDebug.LiveCameraActivitySubcomponent
          .Builder {
    private LiveCameraActivity seedInstance;

    @Override
    public AndroidBindingModule_LiveCameraActivity$app_devDebug.LiveCameraActivitySubcomponent
        build() {
      if (seedInstance == null) {
        throw new IllegalStateException(
            LiveCameraActivity.class.getCanonicalName() + " must be set");
      }
      return new LiveCameraActivitySubcomponentImpl(this);
    }

    @Override
    public void seedInstance(LiveCameraActivity arg0) {
      this.seedInstance = Preconditions.checkNotNull(arg0);
    }
  }

  private final class LiveCameraActivitySubcomponentImpl
      implements AndroidBindingModule_LiveCameraActivity$app_devDebug
          .LiveCameraActivitySubcomponent {
    private LiveCameraActivitySubcomponentImpl(LiveCameraActivitySubcomponentBuilder builder) {}

    @Override
    public void inject(LiveCameraActivity arg0) {
      injectLiveCameraActivity(arg0);
    }

    private LiveCameraActivity injectLiveCameraActivity(LiveCameraActivity instance) {
      DaggerAppCompatActivity_MembersInjector.injectSupportFragmentInjector(
          instance, DaggerApplicationComponent.this.getDispatchingAndroidInjectorOfFragment2());
      DaggerAppCompatActivity_MembersInjector.injectFrameworkFragmentInjector(
          instance, DaggerApplicationComponent.this.getDispatchingAndroidInjectorOfFragment());
      LiveCameraActivity_MembersInjector.injectViewModelFactory(
          instance, DaggerApplicationComponent.this.daggerViewModelFactoryProvider.get());
      LiveCameraActivity_MembersInjector.injectConfiguration(
          instance, DaggerApplicationComponent.this.getConfiguration());
      return instance;
    }
  }

  private final class ServiceSubcomponentBuilder extends ServiceSubcomponent.Builder {
    private WallPanelService seedInstance;

    @Override
    public ServiceSubcomponent build() {
      if (seedInstance == null) {
        throw new IllegalStateException(WallPanelService.class.getCanonicalName() + " must be set");
      }
      return new ServiceSubcomponentImpl(this);
    }

    @Override
    public void seedInstance(WallPanelService arg0) {
      this.seedInstance = Preconditions.checkNotNull(arg0);
    }
  }

  private final class ServiceSubcomponentImpl implements ServiceSubcomponent {
    private ServiceSubcomponentImpl(ServiceSubcomponentBuilder builder) {}

    @Override
    public void inject(WallPanelService arg0) {
      injectWallPanelService(arg0);
    }

    private WallPanelService injectWallPanelService(WallPanelService instance) {
      WallPanelService_MembersInjector.injectConfiguration(
          instance, DaggerApplicationComponent.this.getConfiguration());
      WallPanelService_MembersInjector.injectCameraReader(
          instance, DaggerApplicationComponent.this.getCameraReader());
      WallPanelService_MembersInjector.injectSensorReader(
          instance, DaggerApplicationComponent.this.getSensorReader());
      WallPanelService_MembersInjector.injectMqttOptions(
          instance, DaggerApplicationComponent.this.getMQTTOptions());
      return instance;
    }
  }

  private final class BaseSettingsFragmentSubcomponentBuilder
      extends AndroidBindingModule_BaseSettingsFragment$app_devDebug
          .BaseSettingsFragmentSubcomponent.Builder {
    private BaseSettingsFragment seedInstance;

    @Override
    public AndroidBindingModule_BaseSettingsFragment$app_devDebug.BaseSettingsFragmentSubcomponent
        build() {
      if (seedInstance == null) {
        throw new IllegalStateException(
            BaseSettingsFragment.class.getCanonicalName() + " must be set");
      }
      return new BaseSettingsFragmentSubcomponentImpl(this);
    }

    @Override
    public void seedInstance(BaseSettingsFragment arg0) {
      this.seedInstance = Preconditions.checkNotNull(arg0);
    }
  }

  private final class BaseSettingsFragmentSubcomponentImpl
      implements AndroidBindingModule_BaseSettingsFragment$app_devDebug
          .BaseSettingsFragmentSubcomponent {
    private BaseSettingsFragmentSubcomponentImpl(BaseSettingsFragmentSubcomponentBuilder builder) {}

    @Override
    public void inject(BaseSettingsFragment arg0) {
      injectBaseSettingsFragment(arg0);
    }

    private BaseSettingsFragment injectBaseSettingsFragment(BaseSettingsFragment instance) {
      BaseSettingsFragment_MembersInjector.injectConfiguration(
          instance, DaggerApplicationComponent.this.getConfiguration());
      return instance;
    }
  }

  private final class SettingsFragmentSubcomponentBuilder
      extends AndroidBindingModule_SettingsFragment$app_devDebug.SettingsFragmentSubcomponent
          .Builder {
    private SettingsFragment seedInstance;

    @Override
    public AndroidBindingModule_SettingsFragment$app_devDebug.SettingsFragmentSubcomponent build() {
      if (seedInstance == null) {
        throw new IllegalStateException(SettingsFragment.class.getCanonicalName() + " must be set");
      }
      return new SettingsFragmentSubcomponentImpl(this);
    }

    @Override
    public void seedInstance(SettingsFragment arg0) {
      this.seedInstance = Preconditions.checkNotNull(arg0);
    }
  }

  private final class SettingsFragmentSubcomponentImpl
      implements AndroidBindingModule_SettingsFragment$app_devDebug.SettingsFragmentSubcomponent {
    private SettingsFragmentSubcomponentImpl(SettingsFragmentSubcomponentBuilder builder) {}

    @Override
    public void inject(SettingsFragment arg0) {
      injectSettingsFragment(arg0);
    }

    private SettingsFragment injectSettingsFragment(SettingsFragment instance) {
      BaseSettingsFragment_MembersInjector.injectConfiguration(
          instance, DaggerApplicationComponent.this.getConfiguration());
      return instance;
    }
  }

  private final class CameraSettingsFragmentSubcomponentBuilder
      extends AndroidBindingModule_CameraSettings$app_devDebug.CameraSettingsFragmentSubcomponent
          .Builder {
    private CameraSettingsFragment seedInstance;

    @Override
    public AndroidBindingModule_CameraSettings$app_devDebug.CameraSettingsFragmentSubcomponent
        build() {
      if (seedInstance == null) {
        throw new IllegalStateException(
            CameraSettingsFragment.class.getCanonicalName() + " must be set");
      }
      return new CameraSettingsFragmentSubcomponentImpl(this);
    }

    @Override
    public void seedInstance(CameraSettingsFragment arg0) {
      this.seedInstance = Preconditions.checkNotNull(arg0);
    }
  }

  private final class CameraSettingsFragmentSubcomponentImpl
      implements AndroidBindingModule_CameraSettings$app_devDebug
          .CameraSettingsFragmentSubcomponent {
    private CameraSettingsFragmentSubcomponentImpl(
        CameraSettingsFragmentSubcomponentBuilder builder) {}

    @Override
    public void inject(CameraSettingsFragment arg0) {
      injectCameraSettingsFragment(arg0);
    }

    private CameraSettingsFragment injectCameraSettingsFragment(CameraSettingsFragment instance) {
      BaseSettingsFragment_MembersInjector.injectConfiguration(
          instance, DaggerApplicationComponent.this.getConfiguration());
      return instance;
    }
  }

  private final class MqttSettingsFragmentSubcomponentBuilder
      extends AndroidBindingModule_MqttSettings$app_devDebug.MqttSettingsFragmentSubcomponent
          .Builder {
    private MqttSettingsFragment seedInstance;

    @Override
    public AndroidBindingModule_MqttSettings$app_devDebug.MqttSettingsFragmentSubcomponent build() {
      if (seedInstance == null) {
        throw new IllegalStateException(
            MqttSettingsFragment.class.getCanonicalName() + " must be set");
      }
      return new MqttSettingsFragmentSubcomponentImpl(this);
    }

    @Override
    public void seedInstance(MqttSettingsFragment arg0) {
      this.seedInstance = Preconditions.checkNotNull(arg0);
    }
  }

  private final class MqttSettingsFragmentSubcomponentImpl
      implements AndroidBindingModule_MqttSettings$app_devDebug.MqttSettingsFragmentSubcomponent {
    private MqttSettingsFragmentSubcomponentImpl(MqttSettingsFragmentSubcomponentBuilder builder) {}

    @Override
    public void inject(MqttSettingsFragment arg0) {
      injectMqttSettingsFragment(arg0);
    }

    private MqttSettingsFragment injectMqttSettingsFragment(MqttSettingsFragment instance) {
      BaseSettingsFragment_MembersInjector.injectConfiguration(
          instance, DaggerApplicationComponent.this.getConfiguration());
      return instance;
    }
  }

  private final class HttpSettingsFragmentSubcomponentBuilder
      extends AndroidBindingModule_HttpSettings$app_devDebug.HttpSettingsFragmentSubcomponent
          .Builder {
    private HttpSettingsFragment seedInstance;

    @Override
    public AndroidBindingModule_HttpSettings$app_devDebug.HttpSettingsFragmentSubcomponent build() {
      if (seedInstance == null) {
        throw new IllegalStateException(
            HttpSettingsFragment.class.getCanonicalName() + " must be set");
      }
      return new HttpSettingsFragmentSubcomponentImpl(this);
    }

    @Override
    public void seedInstance(HttpSettingsFragment arg0) {
      this.seedInstance = Preconditions.checkNotNull(arg0);
    }
  }

  private final class HttpSettingsFragmentSubcomponentImpl
      implements AndroidBindingModule_HttpSettings$app_devDebug.HttpSettingsFragmentSubcomponent {
    private HttpSettingsFragmentSubcomponentImpl(HttpSettingsFragmentSubcomponentBuilder builder) {}

    @Override
    public void inject(HttpSettingsFragment arg0) {
      injectHttpSettingsFragment(arg0);
    }

    private HttpSettingsFragment injectHttpSettingsFragment(HttpSettingsFragment instance) {
      BaseSettingsFragment_MembersInjector.injectConfiguration(
          instance, DaggerApplicationComponent.this.getConfiguration());
      return instance;
    }
  }

  private final class DeviceSettingsFragmentSubcomponentBuilder
      extends AndroidBindingModule_DeviceSettings$app_devDebug.DeviceSettingsFragmentSubcomponent
          .Builder {
    private DeviceSettingsFragment seedInstance;

    @Override
    public AndroidBindingModule_DeviceSettings$app_devDebug.DeviceSettingsFragmentSubcomponent
        build() {
      if (seedInstance == null) {
        throw new IllegalStateException(
            DeviceSettingsFragment.class.getCanonicalName() + " must be set");
      }
      return new DeviceSettingsFragmentSubcomponentImpl(this);
    }

    @Override
    public void seedInstance(DeviceSettingsFragment arg0) {
      this.seedInstance = Preconditions.checkNotNull(arg0);
    }
  }

  private final class DeviceSettingsFragmentSubcomponentImpl
      implements AndroidBindingModule_DeviceSettings$app_devDebug
          .DeviceSettingsFragmentSubcomponent {
    private DeviceSettingsFragmentSubcomponentImpl(
        DeviceSettingsFragmentSubcomponentBuilder builder) {}

    @Override
    public void inject(DeviceSettingsFragment arg0) {
      injectDeviceSettingsFragment(arg0);
    }

    private DeviceSettingsFragment injectDeviceSettingsFragment(DeviceSettingsFragment instance) {
      DeviceSettingsFragment_MembersInjector.injectConfiguration(
          instance, DaggerApplicationComponent.this.getConfiguration());
      DeviceSettingsFragment_MembersInjector.injectDialogUtils(
          instance, DaggerApplicationComponent.this.getDialogUtils());
      return instance;
    }
  }

  private final class SensorsSettingsFragmentSubcomponentBuilder
      extends AndroidBindingModule_SensorsSettings$app_devDebug.SensorsSettingsFragmentSubcomponent
          .Builder {
    private SensorsSettingsFragment seedInstance;

    @Override
    public AndroidBindingModule_SensorsSettings$app_devDebug.SensorsSettingsFragmentSubcomponent
        build() {
      if (seedInstance == null) {
        throw new IllegalStateException(
            SensorsSettingsFragment.class.getCanonicalName() + " must be set");
      }
      return new SensorsSettingsFragmentSubcomponentImpl(this);
    }

    @Override
    public void seedInstance(SensorsSettingsFragment arg0) {
      this.seedInstance = Preconditions.checkNotNull(arg0);
    }
  }

  private final class SensorsSettingsFragmentSubcomponentImpl
      implements AndroidBindingModule_SensorsSettings$app_devDebug
          .SensorsSettingsFragmentSubcomponent {
    private SensorsSettingsFragmentSubcomponentImpl(
        SensorsSettingsFragmentSubcomponentBuilder builder) {}

    @Override
    public void inject(SensorsSettingsFragment arg0) {
      injectSensorsSettingsFragment(arg0);
    }

    private SensorsSettingsFragment injectSensorsSettingsFragment(
        SensorsSettingsFragment instance) {
      BaseSettingsFragment_MembersInjector.injectConfiguration(
          instance, DaggerApplicationComponent.this.getConfiguration());
      return instance;
    }
  }
}
